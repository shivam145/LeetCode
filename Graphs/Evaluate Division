class Solution {
public:
    
    void buildGraph(unordered_map<string,vector<pair<string,double>>> &graph , vector<vector<string>>& equations, vector<double>& values) {
        
        for(int i = 0 ; i < equations.size() ; i++) {
            
            string u = equations[i][0];
            string v = equations[i][1];
            double w = values[i];
            
            graph[u].push_back({v,w});
            graph[v].push_back({u,1.0 / w});
        }
        
    }
    double ans = -1,result = 1;
    void DFS(string u , string v , double w ,unordered_map<string,bool> &visited , unordered_map<string,vector<pair<string,double>>> &graph) {
        
        if(visited[u] == true || ans!=-1)
            return;
        visited[u] = true;
        
        result = result * w;
            
        if(u == v) {
            ans = result;
            return;
        }
            
        for(int i = 0 ; i < graph[u].size() ; i++) {
            
            string node = graph[u][i].first;
            double w = graph[u][i].second;
            DFS(graph[u][i].first,v,w,visited,graph);
        }
        result = result / w;
    }
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string,vector<pair<string,double>>> graph;
        buildGraph(graph , equations,values);
        vector<double> finalResult;
        for(int i = 0 ; i < queries.size() ; i++) {
            unordered_map<string,bool> visited;
            ans = -1;
            result = 1;
            
            string u = queries[i][0];
            string v = queries[i][1];
            if(graph.find(u) == graph.end() || graph.find(v) == graph.end())
                finalResult.push_back(ans);
            else {   
                
                DFS(u,v,1,visited,graph);
                finalResult.push_back(ans);
            }
        }
        return finalResult;
    }
};
