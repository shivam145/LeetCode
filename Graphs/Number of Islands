class Solution {
public:
    
    void DFS(int i , int j , vector<vector<char>>& grid, vector<vector<bool>>& visited) {
        
        if(i < 0 || j < 0 || i == grid.size() || j == grid[0].size())
            return;
        
        if(visited[i][j] || grid[i][j] == '0')
            return;
        
        visited[i][j] = true;
        
        DFS(i+1,j,grid,visited);
        DFS(i,j+1,grid,visited);
        DFS(i-1,j,grid,visited);
        DFS(i,j-1,grid,visited);
    }
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty())
            return 0;
        
        vector<vector<bool>> visited(grid.size(),vector<bool>(grid[0].size(),false));
        int counter=0;
        
        for(int i = 0; i < grid.size() ; i++) {
            
            for(int j = 0 ; j < grid[0].size() ; j++) {
                
                if(!visited[i][j] && grid[i][j] == '1') {
                    
                    DFS(i,j,grid,visited);
                    counter++;
                }
            }
            
        }
        return counter;
    }
};
