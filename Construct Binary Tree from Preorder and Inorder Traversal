/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* construct(vector<int> &preorder,vector<int> &inorder,int stpr,int stin,int enin,unordered_map<int,int> &umap)
    {
        if(stpr == preorder.size() || stin > enin)
            return NULL;
        
        int index = umap[preorder[stpr]];
        TreeNode *Node = new TreeNode(inorder[index]);
        Node->left = construct(preorder,inorder,stpr+1,stin,index-1,umap);
        Node->right = construct(preorder,inorder,stpr+index-stin+1,index+1,enin,umap);
        
        return Node;
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        unordered_map<int,int> umap;
        for(int i=0;i<inorder.size();i++)
        {
            umap[inorder[i]]=i;
        }
        
        return construct(preorder,inorder,0,0,inorder.size()-1,umap);
    }
};
