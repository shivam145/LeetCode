/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    TreeNode *root = NULL;
    stack<TreeNode*> st;
    BSTIterator(TreeNode* temp) {
        root = temp;
    }
    
    /** @return the next smallest number */
    int next() {
        
        int element = 0;
        while(root || !st.empty()) {

            if(root) {

                st.push(root);
                root=root->left;
            }
            else { 

                TreeNode *pop_elmt = st.top();
                st.pop();
                root = pop_elmt->right;
                element = pop_elmt->val;
                break;
            }
        }
        return element;
    }
    
    /** @return whether we have a next smallest number */
    bool hasNext() {
        if(st.empty() && !root)
            return false;
        return true;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
